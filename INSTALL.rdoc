Laika is a Ruby on Rails application that targets JRuby/Glassfish for deployment.

= Dependencies

* JRuby >= 1.1.6
* Sun Java >= 1.5
* MySQL >= 5.0 (for UMLS)
* PostgreSQL >= 8.1 (for XDS)

(Laika itself supports either Postgres or MySQL database storage.)

See http://laika.wiki.sourceforge.net/LaikaXDSPIXPDQAlpha for information
about getting an Amazon EC2 system prepared to run Laika.

= Loading the seed data into the database

 $ jruby -S rake db:seed

= Workaround for C32 failure on Glassfish

Currently Laika fails on Glassfish during C32 validation. The only known
workaround for this is to copy the contents of lib/saxon to your JRE's
lib/ext directory.

Associated SF ticket: https://sourceforge.net/tracker/index.php?func=detail&aid=2769072&group_id=205665&atid=994554

= Workaround for JRuby bug

Rails 2.3.2 can cause Laika to trigger a JRuby bug which results in a
Java stacktrace. The following commit fixed this:

http://github.com/rails/rails/commit/35c5727acea882f4cef2a8a2d12d87a8fda045c8

Since this commit isn't in a released version of Rails, we have submodule
pointing to the official Rails 2-3-stable branch:

 $ git submodule init
 $ git submodule update

Associated SF ticket: https://sourceforge.net/tracker/index.php?func=detail&aid=2785138&group_id=205665&atid=994554

= Installing/using multiple version of Java in Ubuntu

 $ # install both Java 1.5 and Java 1.6
 $ sudo aptitude install sun-java5-jdk openjdk-6-jdk
 
 $ # use Java 1.5
 $ sudo update-java-alternatives -s java-1.5.0-sun
 $ java -version
 java version "1.5.0_16"
 Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_16-b02)
 Java HotSpot(TM) Server VM (build 1.5.0_16-b02, mixed mode)

 $ # use Java 1.6
 $ sudo update-java-alternatives -s java-6-openjdk
 $ java -version
 java version "1.6.0_0"
 IcedTea6 1.3.1 (6b12-0ubuntu6) Runtime Environment (build 1.6.0_0-b12)
 OpenJDK Server VM (build 1.6.0_0-b12, mixed mode)

= Deploying to Amazon EC2

*NOTE* this is currently not supported. Instead load an AMI provided by CCHIT.

Here is a quick run-through of how deployment works so far. The first
step is to get a recent AMI of a base system. These instructions assume
you're deploying to an instance of Amazon EC2 public AMI 95fc1afc

The deployment scripts install laika into /var/www/laika/DATESTAMP and
maintain a link to the latest deployed version as /var/www/laika/current.

From a checked-out copy of the latest CCHIT/master on your local
machine:

 $ # add your Amazon-supplied SSH key to the ssh-agent
 $ ssh-add ~/ec2-keys/mykey.pem

 $ # customize your deployment config:
 $ cp config/deploy_local.rb.example config/deploy_local.rb
 $ vi config/deploy_local.rb

 $ # customize your app config:
 $ cp config/database.yml.template config/database.yml
 $ vi config/database.yml
 
 $ bootstrap the deployment setup server
 $ cap deploy:setup
 $ cap deploy:update       # bootstrap the code so we can ...
 $ cap laika:install_gems  # ... automatically install gem dependencies

 $ # once the setup is done, this should be the only command needed to deploy
 $ cap deploy:migrations

